---
import Button from "@/components/general/Button.astro";
import Card from "@/components/general/Card.astro";
import type { Project } from "@/models/projects";
import { Picture } from "astro:assets";
import { twMerge } from "tailwind-merge";

export interface Props {
  project: Project;
  class?: string;
  titleClass?: string;
  isFirst?: boolean;
}
const project = Astro.props.project,
  classes = twMerge(
    "w-full h-full lg:min-w-lg 3xl:min-w-xl p-4 text-left grid grid-cols-1 grid-rows-[auto_auto_1fr_auto] content-start gap-4",
    Astro.props.class,
  ),
  titleClasses = twMerge("text-4xl text-balance", Astro.props.titleClass),
  hasAdditionalLinks = !!project?.links?.length,
  isFirst = Astro.props.isFirst;
---

<Card data-animation="project" animationWithScroll class:list={{ isFirst }}>
  <div data-component="project" class={classes}>
    <Picture
      format="webp"
      src={project.cover}
      alt={project.alt}
      class="w-full object-cover"
      loading="lazy"
    />
    <div class="grid grid-cols-1 gap-2">
      <h4 data-ignore-sizing class={titleClasses}>
        {project.title}
        <small class="font-sans text-sm opacity-70">({project.date})</small>
      </h4>
      <p data-ignore-sizing class="-mt-1 mb-1 italic">
        {project.role}.
      </p>
      <p data-ignore-sizing class="mb-2 text-base">
        {project.description}
      </p>
      <small>
        <strong>Stack:</strong>
        {
          project.technologies.map((tech, i, list) => {
            const isLastItem = i === list.length - 1;
            return (
              <span class="text-opacity-70 font-sans text-sm">
                {`${tech}${!isLastItem ? ", " : "."}`}
              </span>
            );
          })
        }</small
      >
    </div>
    <div class="grid grid-cols-1 content-end">
      {
        hasAdditionalLinks && (
          <div class="flex flex-wrap gap-4">
            <p data-ignore-sizing class="-mr-2">
              Additional Links:
            </p>
            {project?.links?.map((link) => (
              <a
                data-ignore-sizing
                class="text-base underline"
                href={link.href}
                target="_blank"
              >
                {link.text}
              </a>
            ))}
          </div>
        )
      }
    </div>
    <Button
      intent={isFirst ? "secondary" : "primary"}
      class="py-3"
      noDecoration={isFirst}
      isLink
      href={project.cto.href}
      target="_black"
    >
      {project.cto.text}
    </Button>
  </div>
</Card>

<style is:global>
  [data-component="project"] {
    picture {
      transition: transform 0.2s ease-in-out;
      --minus-padding: 0rem;
      border-radius: calc(var(--border-radius-general) - var(--minus-padding));
      overflow: hidden;
      --perspective-x: 0deg;
      --perspective-y: 0deg;
      transform: perspective(2200px) rotateY(var(--perspective-x))
        rotateX(var(--perspective-y));
    }
    * {
      text-wrap: balance;
    }
  }

  [data-component="project"]:hover {
    picture {
      transition: none;
    }
  }

  [data-theme-context="nick"][data-theme="0"] {
    [data-component="project"] {
      background-color: hsl(from var(--color-primary) h s l / 5%);
      &:hover {
        background-color: hsl(from var(--color-primary) h s l / 10%);
      }
    }
    [data-animation="project"].isFirst {
      background-color: var(--color-primary);
      color: var(--color-over-primary);
      &:hover {
        background-color: hsl(from var(--color-primary) h s calc(l - 20));
      }
    }
  }
  [data-animation="project"] {
  }

  [data-theme-context="nick"][data-theme="1"] {
    [data-component="project"] {
      picture {
        --minus-padding: 1rem;
      }
    }
  }
</style>
<!-- <script>
  const cards = Array.from(
    document.querySelectorAll("[data-animation='project']"),
  );

  const handle3dMouseMovement = ({
    container,
    event,
    target,
  }: {
    event: MouseEvent;
    target: HTMLElement;
    container: HTMLElement;
  }) => {
    if (window.innerWidth > 1280) {
      const friction = 1 / 8.5;
      const followX =
        container.offsetWidth / 2 - (event.clientX - container.offsetLeft);
      const followY =
        container.offsetHeight / 2 - (event.clientY - container.offsetTop);
      let x = 0;
      let y = 0;
      x += (-followX - x) * friction;
      y += (followY - y) * friction;
      const normalizedY = Math.min(Math.max(y, -10), 10);
      target.style.setProperty("--perspective-x", `${x}deg`);
      target.style.setProperty("--perspective-y", `${normalizedY}deg`);
    }
  };

  cards.forEach((card) => {
    const target = card.querySelector("picture") as HTMLElement;

    card.addEventListener("mousemove", (e) => {
      const event = e as MouseEvent;
      handle3dMouseMovement({
        container: card as HTMLElement,
        event,
        target: target as HTMLElement,
      });
    });

    card.addEventListener("mouseleave", () => {
      target.style.setProperty("--perspective-x", `0deg`);
      target.style.setProperty("--perspective-y", `0deg`);
    });
  });
</script> -->
