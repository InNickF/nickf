---
import type { HTMLAttributes } from "astro/types";
import { twMerge } from "tailwind-merge";

export interface Props extends HTMLAttributes<"div"> {
  as?: "div" | "section" | "article" | "navbar";
}

const { class: className, as: asElement = "div", ...props } = Astro.props;
const classes = twMerge(" border-transparent", className);
---

{
  asElement === "navbar" && (
    <nav data-c="card" {...props} class={classes}>
      <slot />
    </nav>
  )
}

{
  asElement === "article" && (
    <article data-c="card" {...props} class={classes}>
      <slot />
    </article>
  )
}

{
  asElement === "section" && (
    <section data-c="card" {...props} class={classes}>
      <slot />
    </section>
  )
}

{
  asElement === "div" && (
    <div data-c="card" {...props} class={classes}>
      <slot />
    </div>
  )
}

<style is:global>
  [data-c="card"] {
    border-width: 0px;
  }
  [data-theme-context="nick"][data-theme="1"] [data-c="card"] {
    border-width: 2px;
  }

  [data-c="card"] {
    border-radius: var(--border-radius-general);
    backdrop-filter: blur(10px);
  }

  @property --angle {
    syntax: "<angle>";
    initial-value: 0deg;
    inherits: false;
  }

  @property --x {
    syntax: "<percentage>";
    initial-value: 35%;
    inherits: false;
  }

  @property --shine {
    syntax: "<color>";
    initial-value: transparent;
    inherits: false;
  }

  @property --shadow-strength {
    syntax: "<percentage>";
    initial-value: 0%;
    inherits: false;
  }

  [data-theme-context="nick"][data-theme="1"] [data-c="card"] {
    --surface-1: hsl(from var(--color-ghost) h s calc(l + 5));
    --surface-2: hsl(from var(--color-ghost) h s calc(l + 10));
    --surface-3: hsl(from var(--color-ghost) h s calc(l + 25));
    --shadow-color: var(--color-ghost);
    --shadow-strength: 1%;
    --shadow:
      0 -2px 5px 0 hsl(var(--shadow-color) / calc(var(--shadow-strength) + 2%)),
      0 1px 1px -2px
        hsl(from var(--shadow-color) h s l / calc(var(--shadow-strength) + 3%)),
      0 2px 2px -2px
        hsl(from var(--shadow-color) h s l / calc(var(--shadow-strength) + 3%)),
      0 5px 5px -2px
        hsl(from var(--shadow-color) h s l / calc(var(--shadow-strength) + 4%)),
      0 9px 9px -2px
        hsl(from var(--shadow-color) h s l / calc(var(--shadow-strength) + 5%)),
      0 16px 16px -2px
        hsl(from var(--shadow-color) h s l / calc(var(--shadow-strength) + 6%));

    --_gleam: linear-gradient(
        115deg,
        transparent 40%,
        var(--surface-3),
        transparent 70%
      )
      var(--x) 0 / 600% 100% padding-box;
    --_gleam-cover: radial-gradient(
        circle at center,
        var(--surface-1),
        transparent
      )
      50% padding-box;
    --_cover: linear-gradient(var(--surface-1), var(--surface-1)) padding-box;
    --_shine: conic-gradient(
        from var(--angle),
        var(--shine),
        transparent 20% 80%,
        var(--shine)
      )
      border-box;
    --_edges: linear-gradient(
        155deg,
        var(--surface-3),
        var(--surface-2) 20% 80%,
        var(--surface-3)
      )
      border-box;

    box-shadow: var(--shadow);
    background:
      var(--_gleam-cover), var(--_gleam), var(--_cover), var(--_shine),
      var(--_edges);
  }

  @supports (animation-timeline: view()) {
    [data-theme-context="nick"][data-theme="1"] [data-c="card"] {
      animation: linear both;
      animation-name: gleam, shine, shadow;
      animation-timeline: view();
      animation-range:
        cover -10% cover 100%,
        entry 0% cover 100%,
        entry 0% exit 150%;
    }
  }

  @keyframes gleam {
    from {
      --angle: -0.8turn;
      --x: 0%;
    }
    to {
      --angle: 0.8turn;
      --x: 100%;
    }
  }

  @keyframes shadow {
    from,
    to {
      box-shadow: none;
    }
    50%,
    65% {
      box-shadow: var(--shadow);
    }
  }

  @keyframes shine {
    0% {
      --shine: transparent;
    }
    100% {
      --shine: hsl(from var(--color-ghost) h s calc(l + 80));
    }
  }
</style>
