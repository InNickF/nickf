---
import { twMerge } from "tailwind-merge";

export interface Props {
  title: string;
  class?: string;
  bodyClass?: string;
  titleClass?: string;
  animationDelay?: number;
  animationWithScroll?: boolean;
  stickyTitle?: boolean;
}
const isSticky = Astro.props.stickyTitle ?? true,
  classes = twMerge(
    "grid grid-cols-1 grid-rows-[8rem_1fr] min-h-dvh relative",
    Astro.props.class,
  ),
  bodyClasses = twMerge("z-0 overflow-hidden", Astro.props.bodyClass),
  titleClasses = twMerge(
    "mt-2 py-6 mb-auto mx-auto text-8xl font-bold z-10 overflow-hidden px-24 text-balance",
    isSticky ? "lg:sticky lg:top-[calc(8rem+2rem)] pb-96" : "",
    Astro.props.titleClass,
  ),
  hasSpaces = Astro.props.title.includes(" "),
  title = hasSpaces
    ? Astro.props.title.split(" ")
    : Astro.props.title.split(""),
  secondsDelay = Astro.props.animationDelay ?? 0;
---

<section data-component="section" id={Astro.props.title} class={classes}>
  <h3
    data-ignore-sizing
    class={titleClasses}
    data-delay={secondsDelay}
    data-animation-with-scroll={Astro.props.animationWithScroll ?? false}
  >
    {
      title.map((word, i, list) => {
        const isLastWord = i === list.length - 1;
        const needSpace = hasSpaces && !isLastWord;
        return (
          <span
            class="translate-y-[140%]"
            style={{
              "--_i": i,
            }}
          >
            {word}
            {needSpace && <span>&nbsp;</span>}
          </span>
        );
      })
    }
  </h3>
  <div class={bodyClasses}>
    <slot />
  </div>
</section>

<style is:global>
  [data-component="section"]:not([data-reset-title-styles="true"]) {
    h3 {
      mix-blend-mode: difference;
      span {
        display: inline-block;
      }
    }
  }

  [data-theme-context="nick"][data-theme="0"] {
    [data-component="section"]:not([data-reset-title-styles="true"]) {
      h3 {
        span {
          filter: invert(100%);
        }
      }
    }
  }
</style>

<script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/all";
  gsap.registerPlugin(ScrollTrigger);
  const titles = Array.from(
    document.querySelectorAll(
      `[data-component="section"] h3`,
    ) as unknown as HTMLHeadingElement[],
  );

  titles.forEach((element) => {
    const delay = Number(element?.dataset?.delay) ?? 0;
    const animationWithScroll =
      element?.dataset?.animationWithScroll === "true";
    const words = element.querySelectorAll("span");
    const animationConfig: gsap.TweenVars = {
      y: 0,
      stagger: {
        each: 0.03,
        from: "edges",
      },
      duration: 0.5,
      delay,
      ease: "power2.inOut",
    };

    if (animationWithScroll) {
      animationConfig.scrollTrigger = {
        trigger: element,
        start: "20% 80%",
        toggleActions: "play none none reverse",
      };
    }

    gsap.to(words, animationConfig);
  });
</script>
